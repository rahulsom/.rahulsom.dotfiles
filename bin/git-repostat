#!/usr/bin/ruby
#

class Colorizator
  COLOURS    = {default:    '38', black: '30', red: '31', green: '32', brown: '33', blue: '34', purple: '35',
                cyan:       '36', gray: '37', dark_gray: '1;30', light_red: '1;31', light_green: '1;32', yellow: '1;33',
                light_blue: '1;34', light_purple: '1;35', light_cyan: '1;36', white: '1;37'}.freeze
  BG_COLOURS = {default: '0', black: '40', red: '41', green: '42', brown: '43', blue: '44',
                purple:  '45', cyan: '46', gray: '47', dark_gray: '100', light_red: '101', light_green: '102',
                yellow:  '103', light_blue: '104', light_purple: '105', light_cyan: '106', white: '107'}.freeze

  FONT_OPTIONS = {bold: '1', dim: '2', italic: '3', underline: '4', reverse: '7', hidden: '8'}.freeze

  def self.colorize(text, colour = :default, bg_colour = :default, **options)
    colour_code    = COLOURS[colour]
    bg_colour_code = BG_COLOURS[bg_colour]
    font_options   = options.select { |k, v| v && FONT_OPTIONS.key?(k) }.keys
    font_options   = font_options.map { |e| FONT_OPTIONS[e] }.join(';').squeeze
    return "\e[#{bg_colour_code};#{font_options};#{colour_code}m#{text}\e[0m".squeeze(';')
  end
end

def column_width(list, colname)
  list.map { |row| (row[colname] == nil) ? 0 : row[colname].to_s.length }.max
end

def render_number(row, widths, field_name, width_key, color)
  field_value = row[field_name]
  if field_value == nil
    field_value = ''
  end
  Colorizator.colorize(field_value.to_s.rjust(widths[width_key]), color, :default, bold: (field_value != 0)) + Colorizator.colorize(' | ', :black)
end

def render_string(row, widths, field_name, width_key, just)
  if just == :rjust
    (row[field_name] || '').rjust(widths[width_key]) + Colorizator.colorize(' | ', :black)
  else
    (row[field_name] || '').ljust(widths[width_key]) + Colorizator.colorize(' | ', :black)
  end
end

def print_row(row, widths)
  r = ''
  r += (row[:fix] || '').ljust(widths[:fix])
  if (row[:fix] || '').length > widths[:fix]
    r += "\n" + ''.ljust(widths[:fix])
  end
  r += Colorizator.colorize(' # ', :black)
  r += render_string(row, widths, :branch, :branch, :ljust)
  r += render_string(row, widths, :age, :age, :rjust)
  r += render_number(row, widths, :aheadOrigin, :aheadOrigin, :green)
  r += render_number(row, widths, :behindOrigin, :behindOrigin, :red)
  r += render_number(row, widths, :aheadSync, :aheadSync, :green)
  r += render_number(row, widths, :behindSync, :behindSync, :red)
  puts r
end

def print_type(json, header, type, widths)
  if json.find_all { |row| row[:type] == type }.size > 0
    puts ''
    if header != ''
      h = ''.ljust(widths[:fix]) + Colorizator.colorize(' # ', :black)
      h += Colorizator.colorize(header, :white, :default, bold: true)
      puts h
    end
    json.find_all { |row| row[:type] == type }
        .each { |row| print_row(row, widths) }
  end
end

local_branches       = `git branch | sed -e s/\\*//g | tr -s " " | cut -d " " -f 2 | sort`.split(' ')
remote_branches      = `git branch -r | grep origin | grep -v HEAD`.split(' ').map { |name| name.gsub('origin/', '') }
tracked_branches     = local_branches.&(remote_branches)
local_only_branches  = local_branches - tracked_branches
remote_only_branches = remote_branches - tracked_branches

data = [
    {
        :type        => :header,
        :fix         => '',
        :branch      => 'Branch', :age => 'Age',
        :aheadOrigin => 'orgn+', :behindOrigin => 'orgn-',
        :aheadSync   => 'trgt+', :behindSync => 'trgt-',
    }
]

def find_sync_branch
  remote         = `git remote`.include?('upstream') ? 'upstream' : 'origin'
  primary_branch = `git branch`.include?('develop') ? 'develop' : 'master'
  "#{remote}/#{primary_branch}"
end

SYNC_BRANCH = find_sync_branch

def get_age(name)
  `git show --pretty=format:"%cr" #{name} | head -n 1 | cut -d "," -f 1`.strip!
end

def get_commits(from, to)
  `git log --no-merges #{from}..#{to} --pretty=oneline | wc -l`.to_i
end

local_only_branches.each do |name|
  ret_val           = {
      type:       :local,
      branch:     name,
      age:        get_age(name),
      behindSync: get_commits(name, SYNC_BRANCH),
      aheadSync:  get_commits(SYNC_BRANCH, name),
  }
  excluded_branches = ['master', 'develop', 'gh-pages']
  if ret_val[:aheadSync] == 0 && excluded_branches.find { |it| it == name } == nil
    ret_val[:fix] = "git branch -D #{name}"
  end
  data.append ret_val
end

remote_only_branches.each do |name|
  ret_val           = {
      type:       :remote,
      branch:     name,
      age:        get_age("origin/#{name}"),
      behindSync: get_commits("origin/#{name}", SYNC_BRANCH),
      aheadSync:  get_commits(SYNC_BRANCH, "origin/#{name}"),
  }
  excluded_branches = ['master', 'develop', 'gh-pages']
  if ret_val[:aheadSync] == 0 && excluded_branches.find { |it| it == name } == nil
    ret_val[:fix] = "git push origin :#{name}"
  end
  data.append ret_val
end

tracked_branches.each do |name|
  ret_val           = {
      type:         :tracked,
      branch:       name,
      age:          get_age(name),
      behindSync:   get_commits(name, SYNC_BRANCH),
      aheadSync:    get_commits(SYNC_BRANCH, name),
      behindOrigin: get_commits(name, "origin/#{name}"),
      aheadOrigin:  get_commits("origin/#{name}", name),
  }
  excluded_branches = ['master', 'develop', 'gh-pages']
  if ret_val[:aheadSync] == 0 && excluded_branches.find { |it| it == name } == nil
    ret_val[:fix] = "git branch -D #{name}; git push origin :#{name}"
  end
  data.append ret_val
end

widths = {
    branch:       column_width(data, :branch),
    age:          column_width(data, :age),
    aheadOrigin:  column_width(data, :aheadOrigin),
    behindOrigin: column_width(data, :behindOrigin),
    aheadSync:    column_width(data, :aheadSync),
    behindSync:   column_width(data, :behindSync),
    fix:          70,
}

data.append ({
  :type => :footer,
  :branch => "TARGET: #{SYNC_BRANCH}",
})
print_type(data, '', :header, widths)
print_type(data, 'Local', :local, widths)
print_type(data, 'Remote', :remote, widths)
print_type(data, 'Tracked', :tracked, widths)
print_type(data, '', :footer, widths)
