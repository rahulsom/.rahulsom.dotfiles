#!/bin/bash
TEXT_RED=`tput setaf 1`
TEXT_GREEN=`tput setaf 2`
RESET_FORMATTING=`tput sgr0`
if [ $(git remote | grep -c upstream) = 1 ]; then
  UP_REMOTE=upstream
else
  UP_REMOTE=origin
fi
if [ $(git branch | grep -c develop) = 1 ]; then
  UP_BRANCH=develop
else
  UP_BRANCH=master
fi
SYNC_BRANCH=${CENTRAL_BRANCH:-$UP_REMOTE/$UP_BRANCH}
function localBranches() {
  git branch | sed -e s/\*//g | tr -s " " | cut -d " " -f 2 | sort
}
function remoteBranches() {
  git branch -r | grep origin | grep -v HEAD | sed -e s/origin\\///g | \
      tr -s " " | cut -d " " -f 2 | sort
}
function localStatus() {
  AGE=$(git show --pretty=format:"%cr" $1 | head -n 1 | cut -d "," -f 1)
  BEHIND=$(git log --no-merges $1..${SYNC_BRANCH} --pretty=oneline | wc -l)
  AHEAD=$(git log --no-merges ${SYNC_BRANCH}..$1 --pretty=oneline | wc -l)
  COMMENT=""
  if [ $AHEAD = 0 ]; then
    if [ $1 != master ] && [ $1 != develop ]; then
      COMMENT="git branch -D $1"
      echo $COMMENT >> /tmp/commands.txt
    fi
  fi
  jo type=local branch="$1" age="$AGE" aheadSync="$AHEAD" behindSync="$BEHIND" fix="$COMMENT"
}
function remoteStatus() {
  AGE=$(git show --pretty=format:"%cr" origin/$1 | head -n 1 | cut -d "," -f 1)
  BEHIND=$(git log --no-merges origin/$1..${SYNC_BRANCH} --pretty=oneline | wc -l)
  AHEAD=$(git log --no-merges ${SYNC_BRANCH}..origin/$1 --pretty=oneline | wc -l)
  COMMENT=""
  if [ $AHEAD = 0 ]; then
    if [ $1 != master ] && [ $1 != develop ]; then
      COMMENT="git push origin :$1"
      echo $COMMENT >> /tmp/commands.txt
    fi
  fi
  jo type=remote branch="$1" age="$AGE" aheadSync="$AHEAD" behindSync="$BEHIND" fix="$COMMENT"
}
function dualStatus() {
  AGE=$(git show --pretty=format:"%cr" $1 -- | head -n 1 | cut -d "," -f 1)
  BEHIND_SYNC=$(git log --no-merges $1..${SYNC_BRANCH} --pretty=oneline | wc -l)
  AHEAD_SYNC=$(git log --no-merges ${SYNC_BRANCH}..$1 --pretty=oneline | wc -l)
  BEHIND_ORIGIN=$(git log --no-merges $1..origin/$1 --pretty=oneline | wc -l)
  AHEAD_ORIGIN=$(git log --no-merges origin/$1..$1 --pretty=oneline | wc -l)
  COMMENT=""
  if [ $AHEAD_SYNC = 0 ]; then
    if [ $1 != master ] && [ $1 != develop ]; then
      COMMENT="git branch -D $1; git push origin :$1"
      echo $COMMENT >> /tmp/commands.txt
    fi
  fi
  jo type=synced branch="$1" age="$AGE" aheadOrigin="$AHEAD_ORIGIN" behindOrigin="$BEHIND_ORIGIN" aheadSync="$AHEAD_SYNC" behindSync="$BEHIND_SYNC" fix="$COMMENT"
}
localBranches > /tmp/$$.local.tmp
remoteBranches > /tmp/$$.remote.tmp
comm -12 /tmp/$$.local.tmp /tmp/$$.remote.tmp > /tmp/$$.both.tmp
comm -13 /tmp/$$.local.tmp /tmp/$$.remote.tmp > /tmp/$$.remoteonly.tmp
comm -23 /tmp/$$.local.tmp /tmp/$$.remote.tmp > /tmp/$$.localonly.tmp

addSeparator() {
  jo fix="SEPARATOR" branch="$1" >> /tmp/$$.final.tmp
}
jo type=type branch=branch age=age aheadOrigin="vs" behindOrigin="or" aheadSync="vs" behindSync="ta" fix="fix"> /tmp/$$.final.tmp
jo type="" branch="" age="" aheadOrigin="+" behindOrigin="-" aheadSync="+" behindSync="-" fix="">> /tmp/$$.final.tmp
addSeparator ""

if [ $(wc -l /tmp/$$.localonly.tmp | tr -s " " | cut -d " " -f 2) != 0 ]; then
  addSeparator "Local"
  cat /tmp/$$.localonly.tmp | while read -r i; do localStatus "$i"; done | sort -k 1 -n | while read -r l; do echo $l | jq -c .; done >> /tmp/$$.final.tmp
  addSeparator ""
fi
if [ $(wc -l /tmp/$$.remoteonly.tmp | tr -s " " | cut -d " " -f 2) != 0 ]; then
  addSeparator "Remote"
  cat /tmp/$$.remoteonly.tmp | while read -r i; do remoteStatus "$i"; done | sort -k 1 -n | while read -r l; do echo $l | jq -c .; done>> /tmp/$$.final.tmp
  addSeparator ""
fi
if [ $(wc -l /tmp/$$.both.tmp | tr -s " " | cut -d " " -f 2) != 0 ]; then
  addSeparator "Synced"
  cat /tmp/$$.both.tmp | while read -r i; do dualStatus "$i"; done | sort -k 1 -n | while read -r l; do echo $l | jq -c .; done>> /tmp/$$.final.tmp
  addSeparator ""
fi
cat /tmp/$$.final.tmp | jq -cs '.' | jq -r '.[] | "\(.branch)\t\(.age)\t\(.aheadOrigin)\t\(.behindOrigin)\t\(.aheadSync)\t\(.behindSync)\t\(.fix)"' | sed -e 's/null/ /g' | column -t -s$'\t' | sed -e "s/SEPARATOR//g"
rm /tmp/$$.*.tmp
